import os
import logging
from typing import Dict, List, Optional, Tuple
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    START,
    CLEANING_TYPE,
    APARTMENT_ROOMS,
    APARTMENT_BATHROOMS,
    ADDITIONAL_SERVICES,
    WARDROBE_AREA,
    WINDOWS_QUESTION,
    WINDOWS_COUNT,
    WINDOWS_INSTRUCTION,
    CHEMICAL_QUESTION,
    CHEMICAL_TYPE,
    SOFA_PLACES,
    MATTRESS_SIZE,
    CARPET_AREA,
    CHAIRS_COUNT,
    AFTER_REPAIR_AREA,
    COMMERCIAL_DETAILS,
    PROMO_CODE,
    PHONE,
    ADDRESS,
    DATE,
    NAME,
    CONFIRMATION,
    SPECIAL_REQUESTS,
     WARDROBE_AREA_INPUT,
) = range(25)

# –¶–µ–Ω—ã
PRICES = {
    "room": 1305,
    "bathroom": 1760,
    "kitchen": 1900,
    "additional": {
        "oven": 960,
        "hood": 896,
        "microwave": 512,
        "dishes": 640,
        "fridge": 960,
        "cabinets": 1660,
        "ironing": 1530,
        "balcony": 960,
        "litter_box": 256,
        "wardrobe": 450,
    },
    "chemical": {
        "sofa": {
            "2": 4005,
            "3": 4905,
            "4": 6255,
            "5-6": 7155,
            "7": 8325,
        },
        "mattress": {
            "1_1": 2000,
            "1_2": 4000,
            "2_1": 5500,
            "2_2": 11000,
        },
        "chair": 450,
        "headboard": 1600,
        "carpet": 320,
    },
    "windows": 1450,
    "after_repair": 210,
    "commercial": 70,
}


async def start(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –æ—á–∏—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ."""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    reply_keyboard = [
        ["üß∫ –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "üè° –£–±–æ—Ä–∫–∞ –¥–æ–º–∞"],
        ["üîß –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "ü™ü –ú—ã—Ç—å–µ –æ–∫–æ–Ω"],
        ["üõãÔ∏è –•–∏–º—á–∏—Å—Ç–∫–∞", "üëî –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ"]
    ]
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç ¬´–ö–ª–∏–Ω–æ–≥–æ–ª–∏–∫¬ª ‚Äî –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏ –∑–∞ 1 –º–∏–Ω—É—Ç—É!\n\n"
        "üëâ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:*",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            one_time_keyboard=True, 
            resize_keyboard=True
        ),
        parse_mode="Markdown"
    )
    return CLEANING_TYPE


async def cleaning_type(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏."""
    user = update.message.from_user
    text = update.message.text
    context.user_data["cleaning_type"] = text

    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª: %s", user.first_name, text)

    if text in ["üß∫ –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "üè° –£–±–æ—Ä–∫–∞ –¥–æ–º–∞"]:
        reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
        await update.message.reply_text(
            "–ë—É–¥–µ–º –º—ã—Ç—å –∫—É—Ö–Ω—é?",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True, resize_keyboard=True
            ),
        )
        return APARTMENT_ROOMS
    elif text == "üîß –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞":
        await update.message.reply_text(
            "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 42)",
            reply_markup=ReplyKeyboardRemove(),
        )
        return AFTER_REPAIR_AREA
    elif text == "ü™ü –ú—ã—Ç—å–µ –æ–∫–æ–Ω":
        reply_keyboard = [["–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –æ–∫–Ω–∞?"]]
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –æ–∫–Ω–∞ —Å–∏—è–ª–∏, –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üòä",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True, resize_keyboard=True
            ),
        )
        return WINDOWS_INSTRUCTION
    elif text == "üõãÔ∏è –•–∏–º—á–∏—Å—Ç–∫–∞":
        reply_keyboard = [
            ["–î–∏–≤–∞–ΩüõãÔ∏è", "–ú–∞—Ç—Ä–∞—Å"],
            ["–ö–æ–≤–µ—Ä", "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë"],
            ["–ò–∑–≥–æ–ª–æ–≤—å–µ –∫—Ä–æ–≤–∞—Ç–∏", "‚ùå–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ"],
            ["–ì–æ—Ç–æ–≤–æ"],
        ]
        await update.message.reply_text(
            "üëâ*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ö–∏–º—á–∏—Å—Ç–∫–∏*\n–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=False, resize_keyboard=True
            ),
            parse_mode="Markdown",
        )
        context.user_data["chemical_services"] = []
        return CHEMICAL_TYPE
    elif text == "üëî –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! üíô\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å, —Ç–∏–ø —É–±–æ—Ä–∫–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã: –æ—Ç 70 —Ä—É–±/–º¬≤ (–∑–∞ –±–∞–∑–æ–≤—É—é —É–±–æ—Ä–∫—É) ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Äüòä\n\n"
            "üìã –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è –≤–∞—Å —Ç–æ—á–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:**\n\n"
            "1. **–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è** (–æ—Ñ–∏—Å, –º–∞–≥–∞–∑–∏–Ω, —Å–∞–ª–æ–Ω, —Å–∫–ª–∞–¥ –∏ —Ç.–¥.)\n"
            "2. **–ü–ª–æ—â–∞–¥—å** (–º¬≤)\n"
            "3. **–ö–∞–∫–∏–µ –≤–∏–¥—ã —É–±–æ—Ä–∫–∏ –Ω—É–∂–Ω—ã** (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è, –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è, –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞, —Ö–∏–º—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä.)\n"
            "4. **–û—Å–æ–±—ã–µ –∑–∞–¥–∞—á–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—ã—Ç—å—ë –≤–∏—Ç—Ä–∏–Ω, —á–∏—Å—Ç–∫–∞ –∫–æ–≤—Ä–æ–≤, —É–±–æ—Ä–∫–∞ —Å–∞–Ω—É–∑–ª–æ–≤)\n\n"
            "‚ùóÔ∏è–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n"
            "üíº *–ü—Ä–∏–º–µ—Ä:*\n"
            "¬´–û—Ñ–∏—Å 150 –º¬≤, –Ω—É–∂–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞ (–ø—ã–ª–µ—Å–æ—Å, –ø—Ä–æ—Ç–∏—Ä–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, —Å–∞–Ω—É–∑–ª—ã) + –º—ã—Ç—å—ë –æ–∫–æ–Ω 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü¬ª",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown",
        )
        return COMMERCIAL_DETAILS


async def apartment_rooms(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –º—ã—Ç—å–µ –∫—É—Ö–Ω–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."""
    text = update.message.text
    if text == "–î–∞":
        context.user_data["kitchen"] = True
    else:
        context.user_data["kitchen"] = False

    await update.message.reply_text(
        "*–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (—Ç–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç—ã. –ë–µ–∑ –∫—É—Ö–Ω–∏ –∏ —Å–∞–Ω—É–∑–ª–æ–≤.)*",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown",
    )
    return APARTMENT_BATHROOMS


async def apartment_bathrooms(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤."""
    try:
        rooms = int(update.message.text)
        context.user_data["rooms"] = rooms
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return APARTMENT_BATHROOMS

    reply_keyboard = [["1", "2", "3"], ["4", "5", "6"]]
    await update.message.reply_text(
        "*–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤ (1 –≤–∞–Ω–Ω–∞—è + 1 —Ç—É–∞–ª–µ—Ç = 1 —Å–∞–Ω—É–∑–µ–ª)*",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
        parse_mode="Markdown",
    )
    return ADDITIONAL_SERVICES


async def additional_services(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏."""
    try:
        bathrooms = int(update.message.text)
        context.user_data["bathrooms"] = bathrooms
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return APARTMENT_BATHROOMS

    reply_keyboard = [
        ["üßΩ–ü–æ–º—ã—Ç—å –¥—É—Ö–æ–≤–∫—É (+960‚ÇΩ)", "ü´ß–ü–æ–º—ã—Ç—å –≤—ã—Ç—è–∂–∫—É (+896‚ÇΩ)"],
        ["‚ú®–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ (+512‚ÇΩ)", "üçΩÔ∏è–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É (+640‚ÇΩ)"],
        ["‚ùÑÔ∏è–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫(+960‚ÇΩ)", "üóÑÔ∏è–í–Ω—É—Ç—Ä–∏ –∫—É—Ö.—à–∫–∞—Ñ–æ–≤ (+1660‚ÇΩ)"],
        ["üëö–ü–æ–≥–ª–∞–¥–∏—Ç—å –æ–¥–µ–∂–¥—É (+1530‚ÇΩ/—á–∞—Å)", "ü™£–£–±—Ä–∞—Ç—å—Å—è –Ω–∞ –±–∞–ª–∫–æ–Ω–µ (+960‚ÇΩ)"],
        ["üêæ–õ–æ—Ç–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö (+256‚ÇΩ)", "üß•–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è (+450‚ÇΩ/–º2)"],
        ["‚ùå –ù–µ—Ç, —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞", "–ì–æ—Ç–æ–≤–æ"],
    ]
    await update.message.reply_text(
        "*–ù—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏?*\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üòä",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True
        ),
        parse_mode="Markdown",
    )
    context.user_data["additional_services"] = []
    return WARDROBE_AREA


async def wardrobe_area(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–æ–¥–∞."""
    text = update.message.text
    additional_services = context.user_data.get("additional_services", [])

    if text == "–ì–æ—Ç–æ–≤–æ":
        if "üß•–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è (+450‚ÇΩ/–º2)" in additional_services:
            await update.message.reply_text(
                "–°–∫–æ–ª—å–∫–æ –º¬≤ –≤–∞—à–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3.5):",
                reply_markup=ReplyKeyboardRemove(),
            )
            return WARDROBE_AREA_INPUT  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–ª–æ—â–∞–¥–∏
            
        return await ask_windows_cleaning(update)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ–∫–Ω–∞—Ö

    elif text == "‚ùå –ù–µ—Ç, —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞":
        context.user_data["additional_services"] = []
        return await ask_windows_cleaning(update)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ–∫–Ω–∞—Ö

    else:
        if text not in additional_services:
            additional_services.append(text)
        context.user_data["additional_services"] = additional_services
        return WARDROBE_AREA


async def wardrobe_area_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–ª–æ—â–∞–¥–∏ –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    try:
        area = float(update.message.text)
        if area <= 0:
            raise ValueError("–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            
        context.user_data["wardrobe_area"] = area
        return await ask_windows_cleaning(update)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ–∫–Ω–∞—Ö
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –∏–ª–∏ 3.5):",
            reply_markup=ReplyKeyboardRemove()
        )
        return WARDROBE_AREA_INPUT


async def ask_windows_cleaning(update: Update) -> int:
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –º—ã—Ç—å–µ –æ–∫–æ–Ω (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)."""
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text(
        "*–ü–æ–º—ã—Ç—å –≤–∞–º –æ–∫–Ω–∞?* ü™ü",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
        parse_mode="Markdown"
    )
    return WINDOWS_QUESTION


async def windows_question(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –º—ã—Ç—å–µ –æ–∫–æ–Ω –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ö–∏–º—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Å—á—ë—Ç–∞."""
    text = update.message.text

    async def send_window_instructions():
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –æ–∫–æ–Ω —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
        await update.message.reply_text(
            "ü™ü –ú—ã —Å—á–∏—Ç–∞–µ–º –æ–∫–Ω–∞ —Å—Ç–≤–æ—Ä–∫–∞–º–∏. –û–Ω–∏ –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä—É, *–≥–ª–∞–≤–Ω–æ–µ ‚Äî –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ*",
            parse_mode="Markdown",
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–∫–æ–Ω
        images = [
            "https://disk.yandex.ru/i/2YOHFSazb0NfLg",
            "https://disk.yandex.ru/i/CRTYcZ0ZyBTmow",
            "https://disk.yandex.ru/i/bD0nvSTxnrW7Jg",
            "https://disk.yandex.ru/i/JuuMOEG0QTj3xw",
            "https://disk.yandex.ru/i/Cg--s85r7ivGGw",
            "https://disk.yandex.ru/i/3JbC8AXn6gTHKw",
        ]
        for img in images:
            try:
                await update.message.reply_photo(img)
                await asyncio.sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        await update.message.reply_text(
            "*–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –æ–∫–æ–Ω?* üòä\n(–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 2.5 -> —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –æ–∫–Ω–∞?" –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –º—ã—Ç—å—ë –æ–∫–æ–Ω ("–î–∞")
    if text == "–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –æ–∫–Ω–∞?" or text == "–î–∞":
        await send_window_instructions()
        return WINDOWS_COUNT
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –º—ã—Ç—å—è –æ–∫–æ–Ω ("–ù–µ—Ç")
    elif text == "–ù–µ—Ç":
        if context.user_data.get("cleaning_type") in ["üß∫ –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "üè° –£–±–æ—Ä–∫–∞ –¥–æ–º–∞", "üîß –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"]:
            reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
            await update.message.reply_text(
                "*–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫—É –º–µ–±–µ–ª–∏ –∏ –∫–æ–≤—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å —É–±–æ—Ä–∫–æ–π?* üõãÔ∏è",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, one_time_keyboard=True, resize_keyboard=True
                ),
                parse_mode="Markdown",
            )
            return CHEMICAL_QUESTION
        return await show_summary(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    else:
        reply_keyboard = [["–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –æ–∫–Ω–∞?"]]
            
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True, resize_keyboard=True
            ),
        )
        return WINDOWS_QUESTION


async def windows_instruction(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –æ–∫–æ–Ω"""
    text = update.message.text
    
    if text == "–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –æ–∫–Ω–∞?":
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        await update.message.reply_text(
            "ü™ü –ú—ã —Å—á–∏—Ç–∞–µ–º –æ–∫–Ω–∞ —Å—Ç–≤–æ—Ä–∫–∞–º–∏. –û–Ω–∏ –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä—É, *–≥–ª–∞–≤–Ω–æ–µ ‚Äî –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ*",
            parse_mode="Markdown"
        )
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = [
            "https://disk.yandex.ru/i/2YOHFSazb0NfLg",
            "https://disk.yandex.ru/i/CRTYcZ0ZyBTmow",
            "https://disk.yandex.ru/i/bD0nvSTxnrW7Jg",
            "https://disk.yandex.ru/i/JuuMOEG0QTj3xw",
            "https://disk.yandex.ru/i/Cg--s85r7ivGGw",
            "https://disk.yandex.ru/i/3JbC8AXn6gTHKw"
        ]
        
        for img_url in images:
            try:
                await update.message.reply_photo(img_url)
                await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –æ–∫–æ–Ω* (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 2.5 -> —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É):",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
        return WINDOWS_COUNT
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –æ–∫–Ω–∞?'")
    return WINDOWS_INSTRUCTION
    
    
async def windows_count(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ö–∏–º—á–∏—Å—Ç–∫—É."""
    try:
        windows = float(update.message.text)
        if windows <= 0:
            raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            
        context.user_data["windows"] = windows
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ö–∏–º—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∫–æ–Ω
        if context.user_data.get("cleaning_type") in ["üß∫ –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "üè° –£–±–æ—Ä–∫–∞ –¥–æ–º–∞", "üîß –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"]:
            reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
            await update.message.reply_text(
                "*–û—Ç–ª–∏—á–Ω–æ! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫—É –º–µ–±–µ–ª–∏/–∫–æ–≤—Ä–æ–≤?* üõãÔ∏è",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, one_time_keyboard=True, resize_keyboard=True
                ),
                parse_mode="Markdown",
            )
            return CHEMICAL_QUESTION
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —É–±–æ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Ç–æ–≥–∞–º
        return await show_summary(update, context)
        
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –∏–ª–∏ 2.5)",
            reply_markup=ReplyKeyboardRemove(),
        )
        return WINDOWS_COUNT


async def chemical_question(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ö–∏–º—á–∏—Å—Ç–∫–µ."""
    text = update.message.text
    if text == "–î–∞":
        reply_keyboard = [
            ["–î–∏–≤–∞–ΩüõãÔ∏è", "–ú–∞—Ç—Ä–∞—Å"],
            ["–ö–æ–≤–µ—Ä", "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë"],
            ["–ò–∑–≥–æ–ª–æ–≤—å–µ –∫—Ä–æ–≤–∞—Ç–∏", "‚ùå–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ"],
            ["–ì–æ—Ç–æ–≤–æ"],
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∞—è —Ö–∏–º—á–∏—Å—Ç–∫–∞ –≤–∞–º –Ω—É–∂–Ω–∞?",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=False, resize_keyboard=True
            ),
        )
        context.user_data["chemical_services"] = []
        return CHEMICAL_TYPE
    elif text == "–ù–µ—Ç":
        return await show_summary(update, context)


async def chemical_type(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ö–∏–º—á–∏—Å—Ç–∫–∏."""
    text = update.message.text
    chemical_services = context.user_data.get("chemical_services", [])

    if text == "–ì–æ—Ç–æ–≤–æ":
        if not chemical_services or "‚ùå–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ" in chemical_services:
            return await show_summary(update, context)
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º —É—Ç–æ—á–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
            if "–î–∏–≤–∞–ΩüõãÔ∏è" in chemical_services:
                reply_keyboard = [
                    ["2—Ö –º–µ—Å—Ç–Ω—ã–π"],
                    ["3—Ö –º–µ—Å—Ç–Ω—ã–π"],
                    ["4—Ö –º–µ—Å—Ç–Ω—ã–π"],
                    ["5-6 –º–µ—Å—Ç–Ω—ã–π"],
                    ["7 –º–µ—Å—Ç–Ω—ã–π"],
                ]
                await update.message.reply_text(
                    "*–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –¥–∏–≤–∞–Ω–µ:*",
                    reply_markup=ReplyKeyboardMarkup(
                        reply_keyboard, one_time_keyboard=True, resize_keyboard=True
                    ),
                    parse_mode="Markdown",
                )
                return SOFA_PLACES
            elif "–ú–∞—Ç—Ä–∞—Å" in chemical_services:
                reply_keyboard = [
                    ["1 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã"],
                    ["1 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 2 —Å—Ç–æ—Ä–æ–Ω"],
                    ["2 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 1 —Å—Ç–æ—Ä–æ–Ω—ã"],
                    ["2 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 2 —Å—Ç–æ—Ä–æ–Ω"],
                ]
                await update.message.reply_text(
                    "*–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∞—Å–∞üõèÔ∏è:*",
                    reply_markup=ReplyKeyboardMarkup(
                        reply_keyboard, one_time_keyboard=True, resize_keyboard=True
                    ),
                    parse_mode="Markdown",
                )
                return MATTRESS_SIZE
            elif "–ö–æ–≤–µ—Ä" in chemical_services:
                await update.message.reply_text(
                    "–°–∫–æ–ª—å–∫–æ –º2 –≤–∞—à –∫–æ–≤—ë—Ä?\n(–Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)",
                    reply_markup=ReplyKeyboardRemove(),
                )
                return CARPET_AREA
            elif "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë" in chemical_services:
                await update.message.reply_text(
                    "*–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ—Å–µ–ª/ —Å—Ç—É–ª—å–µ–≤*",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode="Markdown",
                )
                return CHAIRS_COUNT
            elif "–ò–∑–≥–æ–ª–æ–≤—å–µ –∫—Ä–æ–≤–∞—Ç–∏" in chemical_services:
                context.user_data["headboard"] = True
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É
                remaining_services = [
                    s
                    for s in chemical_services
                    if s
                    not in [
                        "–ò–∑–≥–æ–ª–æ–≤—å–µ –∫—Ä–æ–≤–∞—Ç–∏",
                        "–î–∏–≤–∞–ΩüõãÔ∏è",
                        "–ú–∞—Ç—Ä–∞—Å",
                        "–ö–æ–≤–µ—Ä",
                        "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë",
                    ]
                ]
                if remaining_services:
                    # –ï—Å—Ç—å –µ—â–µ —É—Å–ª—É–≥–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
                    if "–î–∏–≤–∞–ΩüõãÔ∏è" in remaining_services:
                        reply_keyboard = [
                            ["2—Ö –º–µ—Å—Ç–Ω—ã–π"],
                            ["3—Ö –º–µ—Å—Ç–Ω—ã–π"],
                            ["4—Ö –º–µ—Å—Ç–Ω—ã–π"],
                            ["5-6 –º–µ—Å—Ç–Ω—ã–π"],
                            ["7 –º–µ—Å—Ç–Ω—ã–π"],
                        ]
                        await update.message.reply_text(
                            "*–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –¥–∏–≤–∞–Ω–µ:*",
                            reply_markup=ReplyKeyboardMarkup(
                                reply_keyboard,
                                one_time_keyboard=True,
                                resize_keyboard=True,
                            ),
                            parse_mode="Markdown",
                        )
                        return SOFA_PLACES
                    # ... –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥
                else:
                    return await show_summary(update, context)
            else:
                return await show_summary(update, context)
    elif text == "‚ùå–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ":
        context.user_data["chemical_services"] = []
        return await show_summary(update, context)
    else:
        if text not in chemical_services:
            chemical_services.append(text)
        context.user_data["chemical_services"] = chemical_services
        return CHEMICAL_TYPE


async def sofa_places(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –¥–∏–≤–∞–Ω–µ."""
    text = update.message.text
    context.user_data["sofa_places"] = text

    chemical_services = context.user_data.get("chemical_services", [])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —É—Å–ª—É–≥–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if "–ú–∞—Ç—Ä–∞—Å" in chemical_services and "mattress_size" not in context.user_data:
        reply_keyboard = [
            ["1 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã"],
            ["1 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 2 —Å—Ç–æ—Ä–æ–Ω"],
            ["2 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 1 —Å—Ç–æ—Ä–æ–Ω—ã"],
            ["2 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 2 —Å—Ç–æ—Ä–æ–Ω"],
        ]
        await update.message.reply_text(
            "*–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∞—Å–∞üõèÔ∏è:*",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True, resize_keyboard=True
            ),
            parse_mode="Markdown",
        )
        return MATTRESS_SIZE
    elif "–ö–æ–≤–µ—Ä" in chemical_services and "carpet_area" not in context.user_data:
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –º2 –≤–∞—à –∫–æ–≤—ë—Ä?\n(–Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)",
            reply_markup=ReplyKeyboardRemove(),
        )
        return CARPET_AREA
    elif (
        "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë" in chemical_services
        and "chairs_count" not in context.user_data
    ):
        await update.message.reply_text(
            "*–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ—Å–µ–ª/ —Å—Ç—É–ª—å–µ–≤*",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown",
        )
        return CHAIRS_COUNT
    else:
        return await show_summary(update, context)


async def mattress_size(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∞—Å–∞."""
    text = update.message.text
    context.user_data["mattress_size"] = text

    chemical_services = context.user_data.get("chemical_services", [])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —É—Å–ª—É–≥–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if "–ö–æ–≤–µ—Ä" in chemical_services and "carpet_area" not in context.user_data:
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –º2 –≤–∞—à –∫–æ–≤—ë—Ä?\n(–Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)",
            reply_markup=ReplyKeyboardRemove(),
        )
        return CARPET_AREA
    elif (
        "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë" in chemical_services
        and "chairs_count" not in context.user_data
    ):
        await update.message.reply_text(
            "*–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ—Å–µ–ª/ —Å—Ç—É–ª—å–µ–≤*",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown",
        )
        return CHAIRS_COUNT
    else:
        return await show_summary(update, context)


async def carpet_area(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–∞."""
    try:
        area = int(update.message.text)
        context.user_data["carpet_area"] = area
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return CARPET_AREA

    chemical_services = context.user_data.get("chemical_services", [])
    if (
        "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë" in chemical_services
        and "chairs_count" not in context.user_data
    ):
        await update.message.reply_text(
            "*–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ—Å–µ–ª/ —Å—Ç—É–ª—å–µ–≤*",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown",
        )
        return CHAIRS_COUNT
    else:
        return await show_summary(update, context)


async def chairs_count(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ª—å–µ–≤."""
    try:
        count = int(update.message.text)
        context.user_data["chairs_count"] = count
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return CHAIRS_COUNT

    return await show_summary(update, context)


async def after_repair_area(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞."""
    try:
        area = int(update.message.text)
        context.user_data["after_repair_area"] = area
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AFTER_REPAIR_AREA

    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text(
        "*–ü–æ–º—ã—Ç—å –≤–∞–º –æ–∫–Ω–∞?*ü™ü",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
        parse_mode="Markdown",
    )
    return WINDOWS_QUESTION


async def commercial_details(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è."""
    context.user_data["commercial_details"] = update.message.text

    reply_keyboard = [["üéâ–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]]
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return PROMO_CODE


async def show_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥."""
    total = 0
    details = []
    cleaning_type = context.user_data.get("cleaning_type")

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–±–æ—Ä–∫–∏
    if cleaning_type in ["üß∫ –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "üè° –£–±–æ—Ä–∫–∞ –¥–æ–º–∞"]:
        rooms = context.user_data.get("rooms", 0)
        if rooms > 0:
            room_cost = rooms * PRICES["room"]
            total += room_cost
            details.append(f"–£–±–æ—Ä–∫–∞ {rooms} –∫–æ–º–Ω–∞—Ç: {room_cost}‚ÇΩ")

        bathrooms = context.user_data.get("bathrooms", 0)
        if bathrooms > 0:
            bathroom_cost = bathrooms * PRICES["bathroom"]
            total += bathroom_cost
            details.append(f"–£–±–æ—Ä–∫–∞ {bathrooms} —Å–∞–Ω—É–∑–ª–æ–≤: {bathroom_cost}‚ÇΩ")

        if context.user_data.get("kitchen", False):
            total += PRICES["kitchen"]
            details.append(f"–£–±–æ—Ä–∫–∞ –∫—É—Ö–Ω–∏: {PRICES['kitchen']}‚ÇΩ")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
        additional_prices = {
            "–¥—É—Ö–æ–≤–∫—É": ("oven", "–ú—ã—Ç—å–µ –¥—É—Ö–æ–≤–∫–∏: {}‚ÇΩ"),
            "–≤—ã—Ç—è–∂–∫—É": ("hood", "–ú—ã—Ç—å–µ –≤—ã—Ç—è–∂–∫–∏: {}‚ÇΩ"),
            "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞": ("microwave", "–ú—ã—Ç—å–µ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏: {}‚ÇΩ"),
            "–ø–æ—Å—É–¥—É": ("dishes", "–ú—ã—Ç—å–µ –ø–æ—Å—É–¥—ã: {}‚ÇΩ"),
            "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫": ("fridge", "–ú—ã—Ç—å–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞: {}‚ÇΩ"),
            "–∫—É—Ö.—à–∫–∞—Ñ–æ–≤": ("cabinets", "–ú—ã—Ç—å–µ –∫—É—Ö–æ–Ω–Ω—ã—Ö —à–∫–∞—Ñ–æ–≤: {}‚ÇΩ"),
            "–ü–æ–≥–ª–∞–¥–∏—Ç—å": ("ironing", "–ì–ª–∞–∂–∫–∞ –æ–¥–µ–∂–¥—ã: {}‚ÇΩ"),
            "–±–∞–ª–∫–æ–Ω–µ": ("balcony", "–£–±–æ—Ä–∫–∞ –±–∞–ª–∫–æ–Ω–∞: {}‚ÇΩ"),
            "–ª–æ—Ç–æ–∫": ("litter_box", "–£–±–æ—Ä–∫–∞ –ª–æ—Ç–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {}‚ÇΩ"),
            "–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è": ("wardrobe", "–£–±–æ—Ä–∫–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–π ({}–º¬≤): {}‚ÇΩ")
        }

        for service in context.user_data.get("additional_services", []):
            for key, (price_key, description) in additional_prices.items():
                if key in service:
                    if key == "–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è":
                        area = context.user_data.get("wardrobe_area", 0)
                        cost = area * PRICES["additional"][price_key]
                        details.append(description.format(area, cost))
                    else:
                        cost = PRICES["additional"][price_key]
                        details.append(description.format(cost))
                    total += cost
                    break

    elif cleaning_type == "üîß –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞":
        area = context.user_data.get("after_repair_area", 0)
        if area > 0:
            cost = area * PRICES["after_repair"]
            total += cost
            details.append(f"–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ ({area}–º¬≤): {cost}‚ÇΩ")

    elif cleaning_type == "ü™ü –ú—ã—Ç—å–µ –æ–∫–æ–Ω":
        windows = context.user_data.get("windows", 0)
        if windows > 0:
            cost = windows * PRICES["windows"]
            total += cost
            details.append(f"–ú—ã—Ç—å–µ {windows} –æ–∫–æ–Ω: {cost:.2f}‚ÇΩ")

    elif cleaning_type == "üëî –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ":
        details.append("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ: —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π")
        details.append(f"–î–µ—Ç–∞–ª–∏: {context.user_data.get('commercial_details', '')}")

    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Ö–∏–º—á–∏—Å—Ç–∫–∏
    chemical_services_config = {
        "–î–∏–≤–∞–ΩüõãÔ∏è": {
            "price_key": "sofa",
            "data_key": "sofa_places",
            "template": "–•–∏–º—á–∏—Å—Ç–∫–∞ {}-–º–µ—Å—Ç–Ω–æ–≥–æ –¥–∏–≤–∞–Ω–∞: {}‚ÇΩ",
            "value_mapping": {
                "2—Ö –º–µ—Å—Ç–Ω—ã–π": "2",
                "3—Ö –º–µ—Å—Ç–Ω—ã–π": "3",
                "4—Ö –º–µ—Å—Ç–Ω—ã–π": "4",
                "5-6 –º–µ—Å—Ç–Ω—ã–π": "5-6",
                "7 –º–µ—Å—Ç–Ω—ã–π": "7"
            }
        },
        "–ú–∞—Ç—Ä–∞—Å": {
            "price_key": "mattress",
            "data_key": "mattress_size",
            "template": "–•–∏–º—á–∏—Å—Ç–∫–∞ –º–∞—Ç—Ä–∞—Å–∞ ({}): {}‚ÇΩ",
            "value_mapping": {
                "1 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã": "1_1",
                "1 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 2 —Å—Ç–æ—Ä–æ–Ω": "1_2",
                "2 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 1 —Å—Ç–æ—Ä–æ–Ω—ã": "2_1",
                "2 –º–µ—Å—Ç–Ω—ã–π/ –ø–æ–º—ã—Ç—å —Å 2 —Å—Ç–æ—Ä–æ–Ω": "2_2"
            }
        },
        "–ö–æ–≤–µ—Ä": {
            "price_key": "carpet",
            "data_key": "carpet_area",
            "template": "–•–∏–º—á–∏—Å—Ç–∫–∞ –∫–æ–≤—Ä–∞ ({}–º¬≤): {}‚ÇΩ"
        },
        "–°—Ç—É–ª—å—è/–∫—Ä–µ—Å–ª–∞ ü™ë": {
            "price_key": "chair",
            "data_key": "chairs_count",
            "template": "–•–∏–º—á–∏—Å—Ç–∫–∞ {} {}: {}‚ÇΩ",
            "pluralize": lambda x: ("—Å—Ç—É–ª—å–µ–≤" if x >= 5 else "—Å—Ç—É–ª–∞" if x >= 2 else "—Å—Ç—É–ª")
        },
        "–ò–∑–≥–æ–ª–æ–≤—å–µ –∫—Ä–æ–≤–∞—Ç–∏": {
            "price_key": "headboard",
            "template": "–•–∏–º—á–∏—Å—Ç–∫–∞ –∏–∑–≥–æ–ª–æ–≤—å—è –∫—Ä–æ–≤–∞—Ç–∏: {}‚ÇΩ"
        }
    }

    for service_name in context.user_data.get("chemical_services", []):
        if service_name in chemical_services_config:
            config = chemical_services_config[service_name]
            
            if "data_key" in config:
                raw_value = context.user_data.get(config["data_key"])
                if not raw_value:
                    continue
                    
                if "value_mapping" in config:
                    value_key = config["value_mapping"].get(raw_value)
                    if not value_key:
                        continue
                    cost = PRICES["chemical"][config["price_key"]].get(value_key, 0)
                    display_value = raw_value.split("/")[0].strip()
                else:
                    try:
                        value = float(raw_value)
                        cost = value * PRICES["chemical"][config["price_key"]]
                        display_value = str(value)
                    except (ValueError, TypeError):
                        continue
                
                if "pluralize" in config:
                    details.append(config["template"].format(
                        int(value), 
                        config["pluralize"](value), 
                        cost
                    ))
                else:
                    details.append(config["template"].format(display_value, cost))
                
                total += cost
            else:
                cost = PRICES["chemical"][config["price_key"]]
                details.append(config["template"].format(cost))
                total += cost

    # –ú—ã—Ç—å–µ –æ–∫–æ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —É–±–æ—Ä–∫–∏
    if cleaning_type != "ü™ü –ú—ã—Ç—å–µ –æ–∫–æ–Ω" and "windows" in context.user_data:
        windows = context.user_data["windows"]
        if windows > 0:
            cost = windows * PRICES["windows"]
            total += cost
            details.append(f"–ú—ã—Ç—å–µ {windows} –æ–∫–æ–Ω: {cost}‚ÇΩ")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    context.user_data["total"] = total
    context.user_data["order_details"] = details

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = "*–û—Ç–ª–∏—á–Ω–æ! üí° –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:*\n\n"
    message += "\n".join(details) if details else "–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ"
    message += f"\n\n*–ò—Ç–æ–≥–æ: {total:.2f}‚ÇΩ*"

    # –î–ª—è –º—ã—Ç—å—è –æ–∫–æ–Ω —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if cleaning_type == "ü™ü –ú—ã—Ç—å–µ –æ–∫–æ–Ω":
        await update.message.reply_text(
            message + "\n\n–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–≤—å—Ç–µ\nüì± *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω*",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        return PHONE

    # –î–ª—è –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    reply_keyboard = [["üéâ–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]]
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
        parse_mode="Markdown",
    )
    return PROMO_CODE


async def promo_code(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ –¥–ª—è —É—Å–ª—É–≥–∏ –º—ã—Ç—å—è –æ–∫–æ–Ω."""
    text = update.message.text
    cleaning_type = context.user_data.get("cleaning_type", "")
    
    # –§–ª–∞–≥, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    expecting_promo_answer = context.user_data.get("expecting_promo_answer", False)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
    if text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await update.message.reply_text(
            "–ñ–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑.üòîüò¢\n\n"
            "–ù–æ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ‚Äî–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ[/start].üßπüíõ",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –º—ã—Ç—å—ë –æ–∫–æ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    if cleaning_type == "ü™ü –ú—ã—Ç—å–µ –æ–∫–æ–Ω":
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–≤—å—Ç–µ\nüì± *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω*",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove(),
        )
        return PHONE

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–∑ show_summary)
    if not expecting_promo_answer and text == "üéâ–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ":
        reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
        await update.message.reply_text(
            "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É? ü´∞",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, 
                one_time_keyboard=True, 
                resize_keyboard=True,
                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ ‚¨áÔ∏è"
            ),
        )
        context.user_data["expecting_promo_answer"] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        return PROMO_CODE

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    if expecting_promo_answer:
        if text == "–î–∞":
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üí´",
                reply_markup=ReplyKeyboardRemove(),
            )
            context.user_data["expecting_promo_answer"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            return PROMO_CODE  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        elif text == "–ù–µ—Ç":
            await update.message.reply_text(
                "–ß—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–≤—å—Ç–µ\nüì± *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω*",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove(),
            )
            context.user_data["expecting_promo_answer"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            return PHONE
        
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å
            reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, 
                    one_time_keyboard=True, 
                    resize_keyboard=True,
                    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ ‚¨áÔ∏è"
                ),
            )
            return PROMO_CODE

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–µ—Å–ª–∏ —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω)
    promo = text.upper()
    if promo == "MARIA":
        total = context.user_data.get("total", 0)
        discount = int(total * 0.15)
        new_total = total - discount
        context.user_data["total"] = new_total
        context.user_data["discount"] = discount
        
        await update.message.reply_text(
            f"–£—Ä–∞!üéâ –í–æ—Ç –≤–∞–º —Å–∫–∏–¥–∫–∞ 15% –ª–∏—á–Ω–æ –æ—Ç –ú–∞—Ä–∏–∏\n–¢–µ–ø–µ—Ä—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: *{new_total}‚ÇΩ*",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif promo == "FIRST":
        total = context.user_data.get("total", 0)
        discount = int(total * 0.15)
        new_total = total - discount
        context.user_data["total"] = new_total
        context.user_data["discount"] = discount
        
        await update.message.reply_text(
            f"–ù–∞–º –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòä\n–í —á–µ—Å—Ç—å –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏ –¥–∞—Ä–∏–º –≤–∞–º —Å–∫–∏–¥–∫—É 15%\n–¢–µ–ø–µ—Ä—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: *{new_total}‚ÇΩ*",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif promo == "MECHTA":
        total = context.user_data.get("total", 0)
        discount = int(total * 0.10)
        new_total = total - discount
        context.user_data["total"] = new_total
        context.user_data["discount"] = discount
        
        await update.message.reply_text(
            f"–ú–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è! ‚ú®\n–í–∞—à–∞ —Å–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É 10%\n–¢–µ–ø–µ—Ä—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: *{new_total}‚ÇΩ*",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await update.message.reply_text(
            "–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç, –Ω–æ –≤—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–ª–æ–¥–µ—Ü! üòä",
            reply_markup=ReplyKeyboardRemove(),
        )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–≤—å—Ç–µ\nüì± *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω*",
        parse_mode="Markdown",
    )
    return PHONE


async def phone(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    if update.message.text in ["–î–∞", "–ù–µ—Ç"]:
        # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
        if update.message.text == "–î–∞":
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏üí´", reply_markup=ReplyKeyboardRemove()
            )
            return PROMO_CODE
        else:
            await update.message.reply_text(
                "–ß—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–≤—å—Ç–µ\nüì± *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω*",
                parse_mode="Markdown",
            )
            return PHONE
    else:
        context.user_data["phone"] = update.message.text
        await update.message.reply_text(
            "üè¢ *–ê–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏* (–≥–æ—Ä–æ–¥/—É–ª–∏—Ü–∞/–¥–æ–º)\n‚ùóÔ∏è–≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏",
            parse_mode="Markdown",
        )
        return ADDRESS


async def address(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å."""
    context.user_data["address"] = update.message.text
    await update.message.reply_text(
        "üóì *–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏*\n‚ùóÔ∏è–≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏",
        parse_mode="Markdown",
    )
    return DATE


async def date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É."""
    context.user_data["date"] = update.message.text
    await update.message.reply_text("üë•–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
    return NAME


async def name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    context.user_data["name"] = update.message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    message = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ?üòä\n\n"
    message += f"‚òéÔ∏è–ù–æ–º–µ—Ä: {context.user_data.get('phone', '')}\n"
    message += f"üìç–ê–¥—Ä–µ—Å: {context.user_data.get('address', '')}\n"
    message += f"üóìÔ∏è–î–∞—Ç–∞: {context.user_data.get('date', '')}\n"
    message += f"üë•–ò–º—è: {context.user_data.get('name', '')}"

    reply_keyboard = [["–î–∞", "–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å"]]
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return CONFIRMATION


async def confirmation(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    text = update.message.text
    if text == "–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–≤—å—Ç–µ\nüì± *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω*",
            parse_mode="Markdown",
        )
        return PHONE
    else:
        await update.message.reply_text(
            "üôè–ù–∞–ø–∏—à–∏—Ç–µ –µ—Å—Ç—å –ª–∏ –º–æ–º–µ–Ω—Ç—ã –∏–ª–∏ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è?\n‚ùóÔ∏è–≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏",
            reply_markup=ReplyKeyboardRemove(),
        )
        return SPECIAL_REQUESTS


async def special_requests(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑."""
    context.user_data["special_requests"] = update.message.text
    user = update.message.from_user  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    client_info = (
        f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:*\n"
        f"ID: {user.id}\n"
        f"Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
        f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
        f"–Ø–∑—ã–∫: {user.language_code if user.language_code else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_chat_id = os.getenv("MANAGER_CHAT_ID")
    if manager_chat_id:
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
            order_message = "üìå *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            order_message += f"–¢–∏–ø —É–±–æ—Ä–∫–∏: {context.user_data.get('cleaning_type', '')}\n"
            order_message += "\n".join(context.user_data.get("order_details", []))
            order_message += f"\n\n*–ò—Ç–æ–≥–æ: {context.user_data.get('total', 0):.2f}‚ÇΩ*\n"
            if "discount" in context.user_data:
                order_message += f"(–° —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ {context.user_data['discount']}‚ÇΩ)\n"
            order_message += f"\n–ö–ª–∏–µ–Ω—Ç: {context.user_data.get('name', '')}\n"
            order_message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone', '')}\n"
            order_message += f"–ê–¥—Ä–µ—Å: {context.user_data.get('address', '')}\n"
            order_message += f"–î–∞—Ç–∞: {context.user_data.get('date', '')}\n"
            order_message += f"–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {context.user_data.get('special_requests', '')}"

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            await context.bot.send_message(
                chat_id=manager_chat_id,
                text=order_message,
                parse_mode="Markdown"
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            await context.bot.send_message(
                chat_id=manager_chat_id,
                text=client_info,
                parse_mode="Markdown"
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å username, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É"
            if user.username:
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", 
                        url=f"https://t.me/{user.username}"
                    )]
                ])
                await context.bot.send_message(
                    chat_id=manager_chat_id,
                    text="–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –Ω–∞–ø—Ä—è–º—É—é:",
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—à–∏–±–∫–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await update.message.reply_text(
        "*–°–ø–∞—Å–∏–±–æ! üéâ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.*\n\n"
        "üìç–ú–û, –î–º–∏—Ç—Ä–æ–≤—Å–∫–∏–π –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥, –ø.¬´–ü–µ—Å–∫–∏¬ª\n"
        "‚òéÔ∏è +7(991)600-32-23",
        parse_mode="Markdown",
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    context.user_data.clear()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    reply_keyboard = [["/start"]]
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∑–∞–∫–∞–∑?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )

    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."""
    reply_markup = ReplyKeyboardMarkup(
        [["/start"]], 
        resize_keyboard=True
    )
    await update.message.reply_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. üò¢\n"
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?",
        reply_markup=reply_markup
    )
    context.user_data.clear()
    return ConversationHandler.END


async def price(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã."""
    message = (
        "üí∞ *–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*\n\n"
        "üßπ *–£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã/–¥–æ–º–∞:*\n"
        "- –ö–æ–º–Ω–∞—Ç–∞: 1305‚ÇΩ\n"
        "- –°–∞–Ω—É–∑–µ–ª: 1760‚ÇΩ\n"
        "- –ö—É—Ö–Ω—è: 1900‚ÇΩ\n\n"
        "üîß *–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞:* 210‚ÇΩ/–º¬≤\n\n"
        "ü™ü *–ú—ã—Ç—å–µ –æ–∫–æ–Ω:* 1450‚ÇΩ –∑–∞ —Å—Ç–≤–æ—Ä–∫—É\n\n"
        "üõãÔ∏è *–•–∏–º—á–∏—Å—Ç–∫–∞:*\n"
        "- –î–∏–≤–∞–Ω 2-–º–µ—Å—Ç–Ω—ã–π: 4005‚ÇΩ\n"
        "- –î–∏–≤–∞–Ω 3-–º–µ—Å—Ç–Ω—ã–π: 4905‚ÇΩ\n"
        "- –î–∏–≤–∞–Ω 4-–º–µ—Å—Ç–Ω—ã–π: 6255‚ÇΩ\n"
        "- –î–∏–≤–∞–Ω 5-6 –º–µ—Å—Ç–Ω—ã–π: 7155‚ÇΩ\n"
        "- –î–∏–≤–∞–Ω 7-–º–µ—Å—Ç–Ω—ã–π: 8325‚ÇΩ\n"
        "- –ú–∞—Ç—Ä–∞—Å 1-–º–µ—Å—Ç–Ω—ã–π (1 —Å—Ç–æ—Ä–æ–Ω–∞): 2000‚ÇΩ\n"
        "- –ú–∞—Ç—Ä–∞—Å 1-–º–µ—Å—Ç–Ω—ã–π (2 —Å—Ç–æ—Ä–æ–Ω—ã): 4000‚ÇΩ\n"
        "- –ú–∞—Ç—Ä–∞—Å 2-–º–µ—Å—Ç–Ω—ã–π (1 —Å—Ç–æ—Ä–æ–Ω–∞): 5500‚ÇΩ\n"
        "- –ú–∞—Ç—Ä–∞—Å 2-–º–µ—Å—Ç–Ω—ã–π (2 —Å—Ç–æ—Ä–æ–Ω—ã): 11000‚ÇΩ\n"
        "- –ö–æ–≤–µ—Ä: 320‚ÇΩ/–º¬≤\n"
        "- –°—Ç—É–ª/–∫—Ä–µ—Å–ª–æ: 450‚ÇΩ\n"
        "- –ò–∑–≥–æ–ª–æ–≤—å–µ –∫—Ä–æ–≤–∞—Ç–∏: 1600‚ÇΩ\n\n"
        "üëî *–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è:* –æ—Ç 70‚ÇΩ/–º¬≤"
    )
    await update.message.reply_text(message, parse_mode="Markdown")


async def contacts(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏."""
    message = (
        "üìç *–ê–¥—Ä–µ—Å:* –ú–û, –î–º–∏—Ç—Ä–æ–≤—Å–∫–∏–π –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥, –ø.¬´–ü–µ—Å–∫–∏¬ª\n"
        "‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* +7(991)600-32-23"
    )
    await update.message.reply_text(message, parse_mode="Markdown")
    
async def fallback_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –≤–≤–æ–¥–µ."""
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. üòï\n\n"
        "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CLEANING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, cleaning_type)],
            APARTMENT_ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, apartment_rooms)],
            APARTMENT_BATHROOMS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, apartment_bathrooms)
            ],
            ADDITIONAL_SERVICES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, additional_services)
            ],
            WARDROBE_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, wardrobe_area)],
            WINDOWS_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, windows_question)
            ],
            WARDROBE_AREA_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, wardrobe_area_input)
            ],
            WINDOWS_INSTRUCTION: [MessageHandler(filters.TEXT, windows_instruction)],
            WINDOWS_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, windows_count)],
            CHEMICAL_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, chemical_question)
            ],
            CHEMICAL_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, chemical_type)],
            SOFA_PLACES: [MessageHandler(filters.TEXT & ~filters.COMMAND, sofa_places)],
            MATTRESS_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, mattress_size)],
            CARPET_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, carpet_area)],
            CHAIRS_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, chairs_count)],
            AFTER_REPAIR_AREA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, after_repair_area)
            ],
            COMMERCIAL_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, commercial_details)
            ],
            PROMO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, promo_code)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation)],
            SPECIAL_REQUESTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, special_requests)
            ],
        },
        fallbacks=[
        CommandHandler("cancel", cancel),
        CommandHandler("start", start),  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_handler)
    ],
    allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CommandHandler("contacts", contacts))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()